#!/bin/bash

print_format () {
    echo "$1"
}

apt_case () {
    PPAS=$(echo $"cat ppas.txt" | tr "\n" " ")

    for ppa in $PPAS
    do
    add-apt-repository ppa:$ppa
    done
}

#Config 
case "$USER" in
"root")
    PFX=""
    ;;
*)
    PFX="sudo"
    ;;
esac

C=${1:-"e"}

while [ $C != "p" ] && [ $C != "a" ]
do

    print_format $'Select a package manager to use\n\n(P)acman  (A)pt\n'
    read -p ":: Answer: " C; echo

    C="${C,,}"

    case "$C" in
    "p")
        PFX="$PFX pacman -S"
        ;;
    "a")
        PFX="$PFX apt install"; apt_case
        ;;
    *)
        print_format $'\nNot a valid input.\n';
        ;;
    esac
done

#Install and use stow (before applications create config files)
print_format $'First, installing stow.\n'
$PFX stow exa jq; echo
./stow

#Install apps with selected package manager
print_format $'Installing applications \n'
apps=$(cat apps.json | jq '.both | @sh' | tr -d \',\")
$PFX $apps; echo

#Apps installed through scripts or aur helper
case "$C" in
"p")
    $PFX yay
    apps=$(cat aur_apps.txt)
    yay -S $(echo $aur_apps | tr "\n" " "); echo
    ;;
"a")
    curl -fsSL https://starship.rs/install.sh | bash 
    mkdir -p ~/.tmp && cd ~/.tmp && git clone git://github.com/wting/autojump.git && cd autojump && ./install.py && rm -rf ~/.tmp/autojump
    ;;
*)
	print_format $'\nNot a valid input.\n' && exit 1
    ;;
esac


#Final config
chsh -s /bin/zsh $USER
